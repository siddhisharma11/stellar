package com.hsbc.meetingroombookingsystem.DAO;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.hsbc.meetingroombookingsystem.domain.Admin;
import com.hsbc.meetingroombookingsystem.domain.Manager;
import com.hsbc.meetingroombookingsystem.domain.Meeting;
import com.hsbc.meetingroombookingsystem.domain.Role;
import com.hsbc.meetingroombookingsystem.domain.User;

public class UserDAO {
	
	private static List<User> admins = new ArrayList();
	private static List<User> managers = new ArrayList();
	private static List<User> members = new ArrayList();
	
	 private static final String JDBC_URL = "jdbc:mysql://localhost:8080/StellarDatabase";
	    private static final String JDBC_USER = "root";
	    private static final String JDBC_PASSWORD = "Root";
	    private static final String GET_ALL_USERS_QUERY = "SELECT * FROM users";
	
	public UserDAO() {
		Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
        PreparedStatement preparedStatement = connection.prepareStatement(GET_ALL_USERS_QUERY);
       ResultSet resultSet = preparedStatement.executeQuery();
       while (resultSet.next()) {
           if(resultSet.getString("role").equals("Manager")) {
        	   User mananger = new Manager(0,"","","",0,null);
        	   mananger.setUniqueID(resultSet.getInt("id"));
        	   mananger.setName(resultSet.getString("name"));
        	   mananger.setEmail(resultSet.getString("email"));
        	   mananger.setPhone(resultSet.getString("phone"));
        	   mananger.setCredits(resultSet.getInt("credits"));
        	   mananger.setRole(new Role(resultSet.getString("role")));
        	   managers.add(mananger);
        	   
           }else if(resultSet.getString("role").equals("Admin")) {
        	   User admin = new Admin(0,"","","");
        	   admin.setUniqueID(resultSet.getInt("id"));
        	   admin.setName(resultSet.getString("name"));
        	   admin.setEmail(resultSet.getString("email"));
        	   admin.setPhone(resultSet.getString("phone"));
        	   admins.add(admin);
        	   
           }else if(resultSet.getString("role").equals("Member")) {
        	   User member = new Member(0,"","","");
        	   member.setUniqueID(resultSet.getInt("id"));
        	   member.setName(resultSet.getString("name"));
        	   member.setEmail(resultSet.getString("email"));
        	   member.setPhone(resultSet.getString("phone"));
        	   members.add(member);
           }
           meeting.setUniqueID(resultSet.getInt("id"));
           meeting.setTitle(resultSet.getString("title"));
           meeting.setMeetingDate((resultSet.getDate("meeting_date")).toLocalDate());
           meeting.setStartTime((resultSet.getTime("start_time")).toLocalTime());
           meeting.setEndTime((resultSet.getTime("end_time")).toLocalTime());
           meeting.setUser(UserDAO.getUserByUserId(resultSet.getInt("user_id")));
           meeting.setTypeOfMeeting(decodemeetingtype(resultSet));
           meeting.setAttendies(decodeUsers(resultSet));
           meetings.add(meeting);
       }
	}
	
	public void addnewManager(User newManager) {
		
	}
	
	public void addnewAdmin(User newAdmin) {
		
	}
	
	public void addnewMember(User newMember) {
		
	}
	
	public static User getUserByUserName(String username,String password) {
		return null;
		
	}
	
	public static User getUserByUserId(int id) {
		return null;
	}
	
	

}
