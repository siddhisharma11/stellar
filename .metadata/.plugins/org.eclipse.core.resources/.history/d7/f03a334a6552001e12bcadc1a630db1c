package com.hsbc.meetingroombookingsystem.DAO;

import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hsbc.meetingroombookingsystem.domain.Amenities;
import com.hsbc.meetingroombookingsystem.domain.Meeting;
import com.hsbc.meetingroombookingsystem.domain.MeetingRoom;
import com.hsbc.meetingroombookingsystem.exceptions.MeetingRoomAlreadyExistsException;

public class MeetingRoomDAO {
	
	private static List<MeetingRoom> meetingrooms = new ArrayList();
	
	 private static final String JDBC_URL = "jdbc:mysql://localhost:8080/StellarDatabase";
	    private static final String JDBC_USER = "root";
	    private static final String JDBC_PASSWORD = "Root";
	    private static final String GET_ALL_MEETINGS_QUERY = "SELECT * FROM meetingrooms";
	    
	    public MeetingRoomDAO() throws SQLException {
	    	Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
	        PreparedStatement preparedStatement = connection.prepareStatement(GET_ALL_MEETINGS_QUERY);
	       ResultSet resultSet = preparedStatement.executeQuery();
	       while (resultSet.next()) {
	           MeetingRoom meetingroom = new MeetingRoom();
	           meetingroom.setUniqueName(resultSet.getString("uniquename"));
	           meetingroom.setSeatingCapacity(resultSet.getInt("seating_capacity"));
	           meetingroom.setRating(resultSet.getInt("rating"));
	           meetingroom.setCost(resultSet.getInt("cost"));
	           meetingroom.setAmenitiesAvailable(decodeamenities(resultSet.getArray("amanities")));
	           meetingrooms.add(meetingroom);
	       }
	    }

	private List<Amenities> decodeamenities(Array array) {
			// TODO Auto-generated method stub
			return null;
		}

	public void newmeetingroom(MeetingRoom newmeetingroom)throws MeetingRoomAlreadyExistsException {
		try {
			checkAlreadyExist(newmeetingroom);
			
		}catch(MeetingRoomAlreadyExistsException e) {
			e.printStackTrace();
			
		}
		
	}

	private void checkAlreadyExist(MeetingRoom newmeetingroom) throws MeetingRoomAlreadyExistsException {
		throw new MeetingRoomAlreadyExistsException("MeetingRoom Already Exists !!");
		
	}
	
}
