package com.hsbc.meetingroombookingsystem.DAO;

import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hsbc.meetingroombookingsystem.domain.Meeting;
import com.hsbc.meetingroombookingsystem.domain.User;
import com.hsbc.meetingroombookingsystem.exceptions.MeetingAlreadyExistsException;

public class MeetingDAO {
	
	 private static final String JDBC_URL = "jdbc:mysql://localhost:8080/StellarDatabase";
	    private static final String JDBC_USER = "root";
	    private static final String JDBC_PASSWORD = "Root";
	    private static final String GET_ALL_MEETINGS_QUERY = "SELECT * FROM meetings";
	
	public void newmeeting(Meeting newmeeting) throws MeetingAlreadyExistsException{
		
		try {
			meetingalreadythere(newmeeting);
		}catch(MeetingAlreadyExistsException e) {
			e.printStackTrace();
		}
		
	}

	private void meetingalreadythere(Meeting newmeeting) throws MeetingAlreadyExistsException {
		
		throw new MeetingAlreadyExistsException("Meeting Already Exists");		
	}
	
	
	
	public static List<Meeting> getAll() throws SQLException {
		List<Meeting> meetings = new ArrayList();
		Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
	             PreparedStatement preparedStatement = connection.prepareStatement(GET_ALL_MEETINGS_QUERY);
	            ResultSet resultSet = preparedStatement.executeQuery();
	            while (resultSet.next()) {
                    Meeting meeting = new Meeting();
                    meeting.setUniqueID(resultSet.getInt("id"));
                    meeting.setTitle(resultSet.getString("title"));
                    meeting.setMeetingDate(resultSet.getDate("meeting_date"));
                    meeting.setStartTime(resultSet.getTime("start_time"));
                    meeting.setEndTime(resultSet.getTime("end_time"));
                    meeting.setUser(UserDAO.getUserByUserId(resultSet.getInt("user_id")));
                    meeting.setTypeOfMeeting(decodemeetingtype(resultSet));
                    meeting.setAttendies(decodeUsers(resultSet));
                    meetings.add(meeting);
                }
		
	}
	
	public static List<User> decodeUsers(ResultSet resultset) throws SQLException{
		List<User> attendies =new ArrayList();
		Array array = resultset.getArray("userId");
		Integer[] intArray = (Integer[]) array.getArray(); 
		for (Integer element : intArray) {
            attendies.add(UserDAO.getUserByUserId(element));
        }
		return attendies;
	}
	
	


}
